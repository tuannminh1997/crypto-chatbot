from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import pandas as pd
import numpy as np
import requests
import anthropic
from datetime import datetime
import os
from typing import Optional
from dotenv import load_dotenv
from fastapi.staticfiles import StaticFiles

# ========================== INIT CONFIGURATION ===========================

# Load environment variables t·ª´ file .env
load_dotenv()

# H√†m load system prompts t·ª´ file txt ri√™ng bi·ªát (gi√∫p d·ªÖ b·∫£o tr√¨)
def load_prompt(filename):
    with open(filename, "r", encoding="utf-8") as f:
        return f.read()

# Load n·ªôi dung system prompt t·ª´ file text
NAME_SYSTEM_PROMPT = load_prompt("name_system_prompt.txt")
ANALYSIS_SYSTEM_PROMPT = load_prompt("analysis_system_prompt.txt")

# ========================== INIT FASTAPI APP ===========================

# Kh·ªüi t·∫°o app FastAPI
app = FastAPI(title="Crypto Analysis API", version="1.0.0")

# B·∫≠t CORS cho ph√©p frontend truy c·∫≠p API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Kh·ªüi t·∫°o Anthropic client
client = anthropic.Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))

# ========================== DEFINE REQUEST - RESPONSE MODELS ===========================

# Model request nh·∫≠n t·ª´ frontend
class ChatRequest(BaseModel):
    message: str

# Model response tr·∫£ v·ªÅ cho frontend
class ChatResponse(BaseModel):
    response: str
    coin: Optional[str] = None
    symbol: Optional[str] = None
    data_points: Optional[int] = None

# ========================== BINANCE DATA & INDICATOR FUNCTIONS ===========================

# H√†m l·∫•y d·ªØ li·ªáu n·∫øn t·ª´ Binance
def get_binance_klines(symbol: str, interval: str = "1d", limit: int = 200):
    try:
        url = "https://api.binance.com/api/v3/klines"
        params = {"symbol": symbol, "interval": interval, "limit": limit}
        response = requests.get(url, params=params)
        if response.status_code != 200:
            print(f"‚ùå Binance API error: {response.status_code}")
            return None
        data = response.json()
        if not data:
            print("‚ùå No data returned from Binance")
            return None
        # Parse v·ªÅ DataFrame
        df = pd.DataFrame(data, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_volume', 'count', 'taker_buy_volume',
            'taker_buy_quote_volume', 'ignore'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        numeric_cols = ['open', 'high', 'low', 'close', 'volume']
        df[numeric_cols] = df[numeric_cols].astype(float)
        df = calculate_technical_indicators(df)
        return df
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Network error: {e}")
        return None
    except Exception as e:
        print(f"‚ùå Error processing Binance data: {e}")
        return None

# H√†m t√≠nh EMA
def calculate_ema(data, period):
    return data.ewm(span=period, adjust=False).mean()

# H√†m t√≠nh RSI
def calculate_rsi(data, period):
    delta = data.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.ewm(alpha=1/period, adjust=False).mean()
    avg_loss = loss.ewm(alpha=1/period, adjust=False).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# H√†m t√≠nh MACD
def calculate_macd(data, fast_period=12, slow_period=26, signal_period=9):
    ema_fast = calculate_ema(data, fast_period)
    ema_slow = calculate_ema(data, slow_period)
    macd_line = ema_fast - ema_slow
    signal_line = calculate_ema(macd_line, signal_period)
    histogram = macd_line - signal_line
    return macd_line, signal_line, histogram

# T√≠nh to√†n b·ªô ch·ªâ b√°o k·ªπ thu·∫≠t c·∫ßn thi·∫øt
def calculate_technical_indicators(df):
    if len(df) < 50:
        print("‚ö†Ô∏è Not enough data for technical indicators")
        return df
    df['ema_7'] = calculate_ema(df['close'], 7)
    df['ema_25'] = calculate_ema(df['close'], 25)
    df['ema_50'] = calculate_ema(df['close'], 50)
    df['rsi_6'] = calculate_rsi(df['close'], 6)
    df['rsi_12'] = calculate_rsi(df['close'], 12)
    df['rsi_24'] = calculate_rsi(df['close'], 24)
    macd_line, signal_line, histogram = calculate_macd(df['close'])
    df['macd_line'] = macd_line
    df['macd_signal'] = signal_line
    df['macd_histogram'] = histogram
    df['volume_ma'] = df['volume'].rolling(window=20).mean()
    return df

# Format d·ªØ li·ªáu k·ªπ thu·∫≠t chuy·ªÉn sang text cho Claude

def format_comprehensive_analysis_data(df, coin_name):
    if df is None or len(df) < 50:
        return None

    recent_data = df.tail(20)  # l·∫•y 20 c√¢y n·∫øn g·∫ßn nh·∫•t
    analysis_text = f"""
PH√ÇN T√çCH K·ª∏ THU·∫¨T {coin_name}/USDT - KHUNG TH·ªúI GIAN 1D (20 phi√™n g·∫ßn nh·∫•t)

D·ªØ li·ªáu k·ªπ thu·∫≠t d∆∞·ªõi ƒë√¢y bao g·ªìm gi√° ƒë√≥ng c·ª≠a, c√°c ƒë∆∞·ªùng trung b√¨nh ƒë·ªông EMA, ch·ªâ b√°o RSI, MACD v√† kh·ªëi l∆∞·ª£ng giao d·ªãch. H√£y ph√¢n t√≠ch xu h∆∞·ªõng, h·ªó tr·ª£ - kh√°ng c·ª±, t√≠n hi·ªáu mua b√°n, x√°c su·∫•t c√°c k·ªãch b·∫£n c√≥ th·ªÉ x·∫£y ra.

| Ng√†y | Close | EMA7 | EMA25 | EMA50 | RSI6 | RSI12 | RSI24 | MACD | Signal | Histogram | Volume |
|---|---|---|---|---|---|---|---|---|---|---|---|
"""

    for idx, row in recent_data.iterrows():
        analysis_text += f"| {row['timestamp'].date()} | {row['close']:.4f} | {row['ema_7']:.4f} | {row['ema_25']:.4f} | {row['ema_50']:.4f} | {row['rsi_6']:.2f} | {row['rsi_12']:.2f} | {row['rsi_24']:.2f} | {row['macd_line']:.4f} | {row['macd_signal']:.4f} | {row['macd_histogram']:.4f} | {row['volume']:.0f} |\n"

    return analysis_text

# ========================== MAIN API ENDPOINT ===========================

@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

# API ch√≠nh: nh·∫≠n message -> tr√≠ch xu·∫•t coin -> l·∫•y d·ªØ li·ªáu -> ph√¢n t√≠ch
@app.post("/chat", response_model=ChatResponse)
async def chat(req: ChatRequest):
    try:
        print(f"üì® Receive message: {req.message}")

        # Ki·ªÉm tra API key
        if not os.getenv("ANTHROPIC_API_KEY"):
            raise HTTPException(status_code=500, detail="ANTHROPIC_API_KEY not set")
        
        # B∆∞·ªõc 1: Tr√≠ch xu·∫•t t√™n coin t·ª´ prompt NAME_SYSTEM_PROMPT
        name_response = client.messages.create(
            model="claude-4-sonnet-20250514",
            max_tokens=100,
            temperature=0.3,
            system=NAME_SYSTEM_PROMPT,
            messages=[{"role": "user", "content": req.message}]
        )
        coin_name = name_response.content[0].text.strip()
        print(f"ü™ô Detected coin: {coin_name}")
        
        # B∆∞·ªõc 2: L·∫•y d·ªØ li·ªáu Binance
        symbol = f"{coin_name}USDT"
        df = get_binance_klines(symbol, "1d", 997)
        if df is None:
            return ChatResponse(response="M√¨nh ch∆∞a nh·∫≠n di·ªán ƒë∆∞·ª£c t√™n coin c·∫ßn ph√¢n t√≠ch.")
        
        # B∆∞·ªõc 3: Chu·∫©n b·ªã d·ªØ li·ªáu k·ªπ thu·∫≠t
        comprehensive_data = format_comprehensive_analysis_data(df, coin_name)
        if comprehensive_data is None:
            return ChatResponse(response="‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch. Vui l√≤ng th·ª≠ l·∫°i sau.")
        
        # B∆∞·ªõc 4: G·ªçi Claude ph√¢n t√≠ch k·ªπ thu·∫≠t to√†n di·ªán
        analysis_response = client.messages.create(
            model="claude-4-sonnet-20250514",
            max_tokens=4000,
            temperature=0.7,
            system=ANALYSIS_SYSTEM_PROMPT,
            messages=[{"role": "user", "content": comprehensive_data}]
        )
        analysis_result = analysis_response.content[0].text
        print("‚úÖ Analysis completed")

        # Tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√¢n t√≠ch cho frontend
        return ChatResponse(
            response=analysis_result,
            coin=coin_name,
            symbol=symbol,
            data_points=len(df)
        )

    except anthropic.APIError as e:
        print(f"‚ùå Anthropic API error: {e}")
        raise HTTPException(status_code=500, detail=f"Anthropic API error: {str(e)}")
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

# ========================== SERVE FRONTEND ===========================

# Mount frontend static n·∫øu c√≥ build s·∫µn
if os.path.isdir("frontend/build"):
    app.mount("/", StaticFiles(directory="frontend/build", html=True), name="static")

# ========================== RUN SERVER ===========================

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
